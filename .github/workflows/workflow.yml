name: CI

on:
  # Trigger the workflow on push or pull request,
  # but only for the master/develop branches
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: '1'
    steps:
      - uses: actions/checkout@v2
      - name: Pull static images
        run: docker-compose -f docker-compose.dev.yml pull
      - id: cache-docker
        uses: actions/cache@v1
        with:
          path: /tmp/docker-registry
          key: docker-registry-buildkit-${{ hashFiles('Dockerfile') }}
      - run: docker run -d -p 5000:5000 --restart=always --name registry -v /tmp/docker-registry:/var/lib/registry registry:2 && npx wait-on tcp:5000
      - run: docker build . -t iati-standard-website_web:latest --cache-from=localhost:5000/iati-standard-website_web --build-arg BUILDKIT_INLINE_CACHE=1
      - run: docker tag iati-standard-website_web:latest localhost:5000/iati-standard-website_web && docker push localhost:5000/iati-standard-website_web || true
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Setup docker-compose
        run: |
          docker container stop registry
          docker-compose -f docker-compose.dev.yml up -d
          while ! echo exit | nc localhost 5000; do sleep 10; done
      - name: flake8 lint
        run: docker-compose -f docker-compose.dev.yml exec -T web make flake8
      - name: pylint
        run: docker-compose -f docker-compose.dev.yml exec -T web make pylint
      - name: pydocstyle lint
        run: docker-compose -f docker-compose.dev.yml exec -T web make pydocstyle
      - name: pytest
        run: docker-compose -f docker-compose.dev.yml exec -T web make test

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    env:
      TAG: ${{ github.sha }}
      STAGE: dev
      NAME: aci-iati-website
    steps:
      - name: "Login to azure"
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: "Build and push image"
      - run: |
          docker build -f Dockerfile_deploy . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/$STAGE-$NAME:$TAG
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/$STAGE-$NAME:$TAG
      - name: "Deploy to Azure Container Instances"
        uses: "azure/aci-deploy@v1.1"
        with:
          secure-environment-variables: DJANGO_SETTINGS_MODULE=iati.settings.dev SECRET_KEY=${{ secrets.DEV_SECRET_KEY }} DATABASE_URL=${{ secrets.DEV_DATABASE_URL }} APPLICATIONINSIGHTS_CONNECTION_STRING=${{ secrets.DEV_APPLICATIONINSIGHTS_CONNECTION_STRING }} AZURE_ACCOUNT_NAME=${{ secrets.DEV_AZURE_ACCOUNT_NAME }} AZURE_ACCOUNT_KEY=${{ secrets.DEV_AZURE_ACCOUNT_KEY }} AZURE_CONTAINER=${{ secrets.DEV_AZURE_CONTAINER }}
          resource-group: ${{ secrets.RESOURCE_GROUP }}
          dns-name-label: ${{ env.STAGE }}-${{ env.NAME }} # url subdomain: dns-name-label.location.azurecontainer.io/
          image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{env.STAGE}}-${{env.NAME}}:${{ env.TAG }}
          registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          registry-username: ${{ secrets.REGISTRY_USERNAME }}
          registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          name: ${{ env.STAGE }}-${{ env.NAME }}
          location: "uksouth"
          ports: 5000

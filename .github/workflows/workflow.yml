name: CI

on:
  # Trigger the workflow on push or pull request,
  # but only for the master/develop branches
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: '1'
    steps:
      - uses: actions/checkout@v2
      - name: Pull static images
        run: docker-compose -f docker-compose.dev.yml pull
      - id: cache-docker
        uses: actions/cache@v2
        with:
          path: /tmp/docker-registry
          key: docker-registry-buildkit-${{ hashFiles('Dockerfile') }}
      - run: docker run -d -p 5000:5000 --restart=always --name registry -v /tmp/docker-registry:/var/lib/registry registry:2 && npx wait-on tcp:5000
      - run: docker build . -t iati-standard-website_web:latest --cache-from=localhost:5000/iati-standard-website_web --build-arg BUILDKIT_INLINE_CACHE=1
      - run: docker tag iati-standard-website_web:latest localhost:5000/iati-standard-website_web && docker push localhost:5000/iati-standard-website_web || true
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Setup docker-compose
        run: |
          docker container stop registry
          docker-compose -f docker-compose.dev.yml up -d
          while ! echo exit | nc localhost 5000; do sleep 10; done
      - name: flake8 lint
        run: docker-compose -f docker-compose.dev.yml exec -T web make flake8
      - name: pylint
        run: docker-compose -f docker-compose.dev.yml exec -T web make pylint
      - name: pydocstyle lint
        run: docker-compose -f docker-compose.dev.yml exec -T web make pydocstyle
      - name: pytest
        run: docker-compose -f docker-compose.dev.yml exec -T web make test
  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/pull/531/merge'
    env:
      DOCKER_BUILDKIT: '1'
      TAG: ${{ github.sha }}
      STAGE: dev
      NAME: aci-iati-website
    steps:
      - uses: actions/checkout@v2
      - id: cache-docker
        uses: actions/cache@v2
        with:
          path: /tmp/docker-registry
          key: docker-registry-buildkit-${{ hashFiles('Dockerfile') }}
      - run: docker run -d -p 5000:5000 --restart=always --name registry -v /tmp/docker-registry:/var/lib/registry registry:2 && npx wait-on tcp:5000
      - run: docker build . -t iati-standard-website_web:latest --cache-from=localhost:5000/iati-standard-website_web --build-arg BUILDKIT_INLINE_CACHE=1
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.DEV_AZURE_CREDENTIALS }}
      - name: "Login to azure"
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: "Build and push image"
        run: |
          docker build -f Dockerfile_deploy . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{env.STAGE}}-${{env.NAME}}:${{ env.TAG }}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{env.STAGE}}-${{env.NAME}}:${{ env.TAG }}
      - name: "Check if blue is running"
        id: blue_is_running
        continue-on-error: true
        uses: "azure/CLI@v1"
        with:
          azcliversion: 2.19.1
          inlineScript: az container show --resource-group "${{ secrets.RESOURCE_GROUP }}" --name "${{ env.STAGE }}-${{ env.NAME }}-blue"
      - name: "Set new colour green"
        if: steps.blue_is_running.outcome == 'success'
        run: |
          echo "NEW_COLOUR=green" >> $GITHUB_ENV
          echo "OLD_COLOUR=blue" >> $GITHUB_ENV
      - name: "Set new colour blue"
        if: steps.blue_is_running.outcome != 'success'
        run: |
          echo "NEW_COLOUR=blue" >> $GITHUB_ENV
          echo "OLD_COLOUR=green" >> $GITHUB_ENV
      - name: "Deploy new Azure Container Instance"
        uses: "azure/CLI@v1"
        with:
          azcliversion: 2.19.1
          inlineScript: |
            az container create \
            --resource-group "${{ secrets.RESOURCE_GROUP }}" \
            --name "${{ env.STAGE }}-${{ env.NAME }}-${{ env.NEW_COLOUR }}" \
            --image "${{ secrets.REGISTRY_LOGIN_SERVER }}/${{env.STAGE}}-${{env.NAME}}:${{ env.TAG }}" \
            --vnet "${{ secrets.DEV_VNET }}" \
            --subnet "${{ secrets.DEV_SUBNET }}" \
            --registry-login-server "${{ secrets.REGISTRY_LOGIN_SERVER }}" \
            --registry-password "${{ secrets.REGISTRY_PASSWORD }}" \
            --registry-username "${{ secrets.REGISTRY_USERNAME }}" \
            --ports 5000 \
            --location uksouth \
            --secure-environment-variables \
              DJANGO_SETTINGS_MODULE="iati.settings.dev" \
              SECRET_KEY="${{ secrets.DEV_SECRET_KEY }}" \
              DATABASE_NAME="${{ secrets.DEV_DATABASE_NAME }}" \
              DATABASE_USER="${{ secrets.DEV_DATABASE_USER }}" \
              DATABASE_PASS="${{ secrets.DEV_DATABASE_PASS }}" \
              DATABASE_HOST="${{ secrets.DEV_DATABASE_HOST }}" \
              DATABASE_PORT="${{ secrets.DEV_DATABASE_PORT }}" \
              APPLICATIONINSIGHTS_CONNECTION_STRING="${{ secrets.DEV_APPLICATIONINSIGHTS_CONNECTION_STRING }}" \
              AZURE_ACCOUNT_NAME="${{ secrets.DEV_AZURE_ACCOUNT_NAME }}" \
              AZURE_ACCOUNT_KEY="${{ secrets.DEV_AZURE_ACCOUNT_KEY }}" \
              AZURE_CONTAINER="${{ secrets.DEV_AZURE_CONTAINER }}" \
              ZENDESK_CAPTCHA_FIELD_ID="${{ secrets.ZENDESK_CAPTCHA_FIELD_ID }}" \
              ZENDESK_SUSPICIOUS_FIELD_ID="${{ secrets.ZENDESK_SUSPICIOUS_FIELD_ID }}" \
              RECAPTCHA_PUBLIC_KEY="${{ secrets.RECAPTCHA_PUBLIC_KEY }}" \
              RECAPTCHA_PRIVATE_KEY="${{ secrets.RECAPTCHA_PRIVATE_KEY }}"
      - name: "Wait for 10 minutes"
        run: sleep 600
      - name: "Check new Azure Container Instance success"
        id: new_has_succeeded
        continue-on-error: true
        uses: "Azure/CLI@v1"
        with:
          azcliversion: 2.19.1
          inlineScript: |
            if echo $(az container logs --resource-group "${{ secrets.RESOURCE_GROUP }}" --name "${{ env.STAGE }}-${{ env.NAME }}-${{ env.NEW_COLOUR }}") | grep -q "Booting worker with pid"; then
              echo "Success"
            else
              echo "Failure"
              exit 1
            fi
      - if: steps.new_has_succeeded.outcome == 'success'
        name: "Update Application gateway backend"
        uses: "azure/CLI@v1"
        with:
          azcliversion: 2.19.1
          inlineScript: |
            az network application-gateway address-pool update \
            --gateway-name "${{ secrets.DEV_APP_GATEWAY_NAME }}" \
            --resource-group "${{ secrets.RESOURCE_GROUP }}" \
            --name "${{ secrets.DEV_APP_GATEWAY_POOL }}" \
            --set backendAddresses[0].ipAddress=$(az container show --name "${{ env.STAGE }}-${{ env.NAME }}-${{ env.NEW_COLOUR }}" --resource-group "${{ secrets.RESOURCE_GROUP }}" --query ipAddress.ip --output tsv)
      - if: steps.new_has_succeeded.outcome == 'success'
        name: "Delete previous Container Instance"
        uses: "azure/CLI@v1"
        with:
          azcliversion: 2.19.1
          inlineScript: |
            az container delete \
            --resource-group "${{ secrets.RESOURCE_GROUP }}" \
            --name "${{ env.STAGE }}-${{ env.NAME }}-${{ env.OLD_COLOUR }}"
      - if: steps.new_has_succeeded.outcome != 'success'
        name: "Delete failed Container Instance"
        uses: "azure/CLI@v1"
        with:
          azcliversion: 2.19.1
          inlineScript: |
            az container delete \
            --resource-group "${{ secrets.RESOURCE_GROUP }}" \
            --name "${{ env.STAGE }}-${{ env.NAME }}-${{ env.NEW_COLOUR }}"

# Generated by Django 2.0.12 on 2019-12-19 11:45

import json
from django.core.serializers.json import DjangoJSONEncoder
from django.db import migrations, transaction
from importlib import import_module

FIELDS = [
    'title',
    'title_en',
    'title_fr',
    'draft_title',
    'slug',
    'slug_en',
    'slug_fr',
    'live',
    'url_path',
    'url_path_en',
    'url_path_fr',
    'owner',
    'seo_title',
    'seo_title_en',
    'seo_title_fr',
    'show_in_menus',
    'search_description',
    'search_description_en',
    'search_description_fr',
    'go_live_at',
    'expire_at',
    'expired',
    'locked',
    'first_published_at',
    'last_published_at',
    'heading',
    'heading_en',
    'heading_fr',
    'excerpt',
    'excerpt_en',
    'excerpt_fr',
    'social_media_image',
]

STREAMFIELDS = [
    'content_editor',
    'content_editor_en',
    'content_editor_fr',
]


class Migration(migrations.Migration):

    def copy_tools(apps, schema_editor):
        """With the given page, copy the page data to the content stream_data"""
        # if the models no longer exists, return directly
        try:
            HomePage = import_module('home.models').HomePage
            ToolsPage = import_module('using_data.models').ToolsPage
            ToolPage = import_module('tools.models').ToolPage
            ToolsIndexPage = import_module('using_data.models').ToolsIndexPage
            ToolsListingPage = import_module('tools.models').ToolsListingPage
            StreamValue = import_module('wagtail.core.blocks.stream_block').StreamValue
        except Exception:
            return

        # test for the existance of an original tools index page
        # an empty database won't have this, but it needs wrapping in an atomic transaction so we can back out successfully
        # https://docs.djangoproject.com/en/2.2/topics/db/transactions/#controlling-transactions-explicitly
        tools_index_page_count = 0
        try:
            with transaction.atomic():
                tools_index_page_count = ToolsIndexPage.objects.all().count()
        except Exception:
            return

        # only proceed if we have a valid old tools page to migrate from
        if tools_index_page_count:

            parent = HomePage.objects.all().first()
            page = ToolsIndexPage.objects.all().first()
            new_page = ToolsListingPage()

            page_data = json.loads(page.to_json())
            for field in FIELDS:
                setattr(new_page, field, getattr(page, field))
            for field in STREAMFIELDS:
                raw_text = json.dumps(content_to_content_streamfield_data(page_data[field]), cls=DjangoJSONEncoder)
                stream_value = StreamValue(getattr(new_page, field), [], is_lazy=True, raw_text=raw_text)
                setattr(new_page, field, stream_value)

            parent.add_child(instance=new_page)
            new_page.save_revision()
            new_page.unpublish()

            parent = new_page

            for page in ToolsPage.objects.all():
                new_page = ToolPage()
                page_data = json.loads(page.to_json())
                for field in FIELDS:
                    setattr(new_page, field, getattr(page, field))
                for field in STREAMFIELDS:
                    raw_text = json.dumps(content_to_content_streamfield_data(page_data[field]), cls=DjangoJSONEncoder)
                    stream_value = StreamValue(getattr(new_page, field), [], is_lazy=True, raw_text=raw_text)
                    setattr(new_page, field, stream_value)

                parent.add_child(instance=new_page)
                new_page.save_revision()
                new_page.unpublish()

    dependencies = [
        ('tools', '0002_auto_20191218_1535'),
    ]

    operations = [
        migrations.RunPython(copy_tools),
    ]


def content_to_content_streamfield_data(content):
    return [
        {'type': block_data['type'], 'value': block_data['value']}
        for block_data in json.loads(content)
    ]
